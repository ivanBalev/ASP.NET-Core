@using InSelfLove.Services.Data.Helpers;
@using InSelfLove.Web.InputModels.Comment
@using Microsoft.AspNetCore.Identity
@using InSelfLove.Data.Models
@using CloudinaryDotNet;


@model InSelfLove.Web.ViewModels.Comment.CommentViewModel

@inject CloudinaryDotNet.Cloudinary Cloudinary
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer

@{
    // Remove layout when using REST API Request
    if (this.ViewContext.RouteData.Values["controller"].ToString() == "Comments")
    {
        this.Layout = null;
    }

    string commentLevel = "";

    // This partial is recursive. We use ViewData to determine the comment's level(main or subcomment)
    // Profile pic sizing
    if (Model.ParentCommentId == null)
    {
        commentLevel = "main";
        ViewData["width"] = "64";
        ViewData["height"] = "64";
    }
    // Don't enter the 2 cases below if this is an api call
    else if (Model.ParentCommentId != null && ViewData["width"]?.ToString() == "64")
    {
        commentLevel = "firstSub";
        ViewData["width"] = "40";
        ViewData["height"] = "40";
    }
    else if (ViewData["width"]?.ToString() != null)
    {
        commentLevel = "secondSub";
        ViewData["width"] = "30";
        ViewData["height"] = "30";
    }

    var endP = string.Join('/', Model.UserProfilePhoto.Split('/').TakeLast(2).Select(x => x.Split('.')[0]));

    var profilePic = Cloudinary.Api.UrlImgUp.Transform(new Transformation()
    .Width(ViewData["width"]?.ToString() ?? "64")
    .Height(ViewData["height"]?.ToString() ?? "64")
    .Crop("fill"))
    .Secure(true)
    .BuildImageTag(endP, new StringDictionary("class=d-block rounded-circle", "alt=User profile photo"));

    // Variables
    bool userIsSignedIn = this.SignInManager.IsSignedIn(this.User);
    bool commentsAvailable = Model.SubComments.Count > 0;
    bool userOwnsComment = this.UserManager.GetUserId(this.User) == Model.UserId;
}

<div id="@Model.Id" class="@(commentLevel)-comment @(commentLevel == "main" ? null : "align-self-end")">
    <div class="row">
        <div class="col-md-12 mb-0">
            <div class="card border-0">
                <div class="card-header bg-white border-0">
                    <div class="media flex-wrap w-100 align-items-center">
                       @Html.Raw(profilePic)
                        <div class="media-body mx-3">
                            <div><span class="userName">@Model.UserUserName</span></div>
                            <div class="text-muted small">@Model.CreatedOn.ToString("dd MMMM yyyy HH:mm")</div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <p class="comment-content">
                        @Html.Raw(Model.ContentWithNoTags)
                    </p>
                    <div class="row">
                        <div class="col">
                            @if (userIsSignedIn)
                            {
                                <partial name="_CommentAddPartial" model="@(new CommentInputModel {
                                                                    ArticleId = Model.ArticleId, VideoId = Model.VideoId, ParentCommentId = Model.Id })" />

                                <partial name="_CommentEditPartial" model="@(new CommentEditInputModel {
                                                    ArticleId = Model.ArticleId, VideoId = Model.VideoId,  Id = Model.Id, Content = Model.ContentWithNoTags})" />
                            }
                        </div>
                    </div>

                    <div class="row comment-buttons justify-content-between">
                        <div class="col-10 reply-subcomments-group">
                            @if (userIsSignedIn)
                            {
                                <button type="button" class="green-btn btn-sm border-0 reply-button px-2">
                                    @localizer["Reply"]
                                </button>
                            }
                            @if (commentsAvailable)
                            {
                                <button class="showSubcomments btn btn-sm white-btn">
                                    @localizer["Subcomments"]
                                </button>
                                <button class="hideSubcomments hide-subcomments-btn btn white-btn btn-sm mb-3 ms-3 align-self-start">
                                    @localizer["Hide"]
                                </button>
                            }
                        </div>

                        @if (this.User.IsInRole(AppConstants.AdministratorRoleName) || userOwnsComment)
                        {
                            <div class="col-2 px-0">
                                <!-- Edit button only for user's own comments -->
                                @if (userOwnsComment)
                                {
                                    <img src="~/Custom/icons/edit-solid.svg" class="edit-btn editCommentBtn d-inline-block" alt="edit button" data-creator="Icon by www.fontawesome.com / https://fontawesome.com/license" />
                                }
                                <!-- Delete comment -->
                                <img src="~/Custom/icons/trash-solid.svg" class="delete-btn deleteCommentBtn d-inline-block ms-1" data-bs-toggle="modal" data-bs-target="#confirm-comment-delete" alt="delete button" data-creator="Icon by www.fontawesome.com / https://fontawesome.com/license" />
                            </div>
                        }
                    </div>
                </div>

                @if (commentsAvailable)
                {
                    @foreach (var item in Model.SubComments)
                    {
                        <partial name="_CommentSinglePartial" model="@item" />
                    }
                }
            </div>
        </div>
    </div>
</div>